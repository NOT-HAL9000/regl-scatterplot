import{b as e,d as t,c as o,e as n}from"./utils.e39baa4d.js";import{I as r}from"./vendor.ad595088.js";const a=["T-shirt/top","Trouser","Pullover","Dress","Coat","Sandal","Shirt","Sneaker","Bag","Ankle boot"],s=["#FFFF00","#1CE6FF","#FF34FF","#FF4A46","#008941","#006FA6","#A30059","#FFDBE5","#7A4900","#0000A6"],c=fetch("https://storage.googleapis.com/flekschas/regl-scatterplot/fashion-mnist-embeddings.arrow");e("Loading...");document.querySelector("#footer").classList.remove("hidden");document.querySelector("#info-content").innerHTML='\n<p><a href="https://github.com/zalandoresearch/fashion-mnist" target="_blank">Fashion MNIST</a> embedding using four different techniques: PCA, t-SNE, UMAP, and a convolutional autoencoder.</p>\n<p> Select a point so see the corresponding image.</p>\n';const i=document.querySelector("#parent-wrapper"),l=document.createElement("div");l.id="note",l.style.opacity=0,i.appendChild(l);const d=()=>{l.style.opacity=0},p=document.createElement("div");p.id="center-note",p.style.opacity=0;const u=document.createElement("div");u.style.width="56px",u.style.height="56px",u.style.backgroundColor="black",u.style.backgroundSize="cover",u.style.backgroundRepeat="no-repeat",p.appendChild(u),i.appendChild(p);const m=(e,t)=>{const o=new Image;var n;const r=`https://storage.googleapis.com/flekschas/regl-scatterplot/fashion-mnist-images/${n=5,String(e).padStart(n,"0")}.png`;o.onload=()=>{p.style.opacity=1,p.style.transform="translate(-50%, -50%) scale(1)",u.style.backgroundImage=`url("${r}")`,p.style.background=s[t]},o.src=r};i.style.display="grid",i.style.gridTemplateColumns="repeat(2, minmax(0, 1fr))",i.style.gridTemplateRows="repeat(2, minmax(0, 1fr))",i.style.gap="1rem";const y=document.querySelector("#canvas"),h=document.querySelector("#canvas-wrapper");h.style.position="relative";const g=[y];for(let x=0;x<3;x++){const e=y.cloneNode(),t=h.cloneNode();t.appendChild(e),i.appendChild(t),g.push(e)}const v=document.querySelector("#num-points"),f=document.querySelector("#num-points-value"),b=document.querySelector("#point-size"),S=document.querySelector("#point-size-value"),E=document.querySelector("#opacity"),k=document.querySelector("#opacity-value"),q=document.querySelector("#click-lasso-initiator"),F=document.querySelector("#reset"),C=document.querySelector("#example-multiple-instances");C.setAttribute("class","active"),C.removeAttribute("href");const w=t();w.isSupported||e("Unfortunately, your browser does not support all WebGL extensions required by regl-scatterplot",!0);const L=g.map((e=>o({renderer:w,canvas:e,pointSize:3,opacity:.66,lassoInitiator:true})));console.log(`Scatterplot v${L[0].get("version")}`),v.disabled=!0;const A=e=>{b.value=e,S.innerHTML=e,L.forEach((t=>t.set({pointSize:e})))};b.addEventListener("input",(e=>A(+e.target.value))),A(L[0].get("pointSize"));const z=e=>{E.value=e,k.innerHTML=e,L.forEach((t=>t.set({opacity:e})))};E.addEventListener("input",(e=>z(+e.target.value))),z(L[0].get("opacity"));q.addEventListener("change",(e=>{L.forEach((t=>t.set({lassoInitiator:e.target.checked})))})),q.checked=L[0].get("lassoInitiator");F.addEventListener("click",(()=>{L.forEach((e=>e.reset()))}));const T=e=>{L.filter((t=>t!==e)).forEach((e=>{e.deselect({preventEvent:!0})})),p.style.opacity=0,p.style.transform="translate(-50%, -50%) scale(0)"};c.then((e=>r(e))).then((e=>{n();const t=e.data[0].children.map((e=>e.values)),o=t[t.length-1];f.innerHTML=e.numRows,L.forEach(((e,n)=>{e.draw({x:t[2*n],y:t[2*n+1],z:o}),e.set({colorBy:"z",pointColor:s}),e.subscribe("pointover",(e=>{var t,n;t=a[o[e]],n=s[o[e]],l.style.opacity=1,l.style.background=n,l.textContent=t})),e.subscribe("pointout",d),e.subscribe("view",(({view:t})=>{return o=e,n=t,void L.filter((e=>e!==o)).forEach((e=>{e.view(n,{preventEvent:!0})}));var o,n})),e.subscribe("select",(({points:t})=>((e,t,o)=>{L.filter((t=>t!==e)).forEach((e=>{e.select(t,{preventEvent:!0})}));const n=t[Math.floor(Math.random()*(t.length-1))];m(n,o[n])})(e,t,o))),e.subscribe("deselect",(()=>T(e)))}))})).catch((t=>{e("Could not load embedding... Damn...",!0),console.error(t)}));
